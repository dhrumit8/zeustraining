// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WalkIn_Portal_Backend.Models;

#nullable disable

namespace WalkInPortalBackend.Migrations
{
    [DbContext(typeof(WalkinPortalContext))]
    partial class WalkinPortalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb3_general_ci")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb3");

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.EducationalQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("College")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("college");

                    b.Property<string>("CollegeLocation")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("college_location");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("percentage");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("qualification");

                    b.Property<string>("StreamBranch")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("stream_branch");

                    b.Property<int>("UserDetailsUserId")
                        .HasColumnType("int")
                        .HasColumnName("user_details_user_id");

                    b.Property<short>("YearOfPassing")
                        .HasColumnType("year")
                        .HasColumnName("year_of_passing");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserDetailsUserId" }, "fk_educational_qualifications_user_details1_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique();

                    b.ToTable("educational_qualifications", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.ExperiencedHasTechnologiesExpertise", b =>
                {
                    b.Property<int>("ExperiencedQualificationId")
                        .HasColumnType("int")
                        .HasColumnName("experienced_qualification_id");

                    b.Property<int>("TechnologiesExpertiseId")
                        .HasColumnType("int")
                        .HasColumnName("technologies_expertise_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ExperiencedQualificationId", "TechnologiesExpertiseId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ExperiencedQualificationId" }, "fk_experienced_qualification_has_technologies_expertise_exp_idx");

                    b.HasIndex(new[] { "TechnologiesExpertiseId" }, "fk_experienced_qualification_has_technologies_expertise_tec_idx");

                    b.ToTable("experienced_has_technologies_expertise", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.ExperiencedHasTechnologiesFamiliar", b =>
                {
                    b.Property<int>("ExperiencedQualificationId")
                        .HasColumnType("int")
                        .HasColumnName("experienced_qualification_id");

                    b.Property<int>("TechnologiesFamiliarId")
                        .HasColumnType("int")
                        .HasColumnName("technologies_familiar_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("ExperiencedQualificationId", "TechnologiesFamiliarId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ExperiencedQualificationId" }, "fk_experienced_qualification_has_technologies_familiar_expe_idx");

                    b.HasIndex(new[] { "TechnologiesFamiliarId" }, "fk_experienced_qualification_has_technologies_familiar_tech_idx");

                    b.ToTable("experienced_has_technologies_familiar", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.ExperiencedQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<sbyte>("ApperedForZeusTest")
                        .HasColumnType("tinyint")
                        .HasColumnName("appered_for_zeus_test");

                    b.Property<int>("CurrentCtc")
                        .HasColumnType("int")
                        .HasColumnName("current_ctc");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("ExpectedCtc")
                        .HasColumnType("int")
                        .HasColumnName("expected_ctc");

                    b.Property<DateOnly?>("NoticePeriodEnd")
                        .HasColumnType("date")
                        .HasColumnName("notice_period_end");

                    b.Property<int?>("NoticePeriodLength")
                        .HasColumnType("int")
                        .HasColumnName("notice_period_length");

                    b.Property<sbyte>("OnNoticePeriod")
                        .HasColumnType("tinyint")
                        .HasColumnName("on_notice_period");

                    b.Property<string>("OtherTechnologiesExpertise")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("other_technologies_expertise");

                    b.Property<string>("OtherTechnologiesFamiliar")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("other_technologies_familiar");

                    b.Property<int>("ProfessionalQualificationId")
                        .HasColumnType("int")
                        .HasColumnName("professional_qualification_id");

                    b.Property<string>("RoleApplied")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("role_applied");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int")
                        .HasColumnName("years_of_experience");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProfessionalQualificationId" }, "fk_experienced_qualification_professional_qualification1_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE1");

                    b.ToTable("experienced_qualification", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.FresherHasTechnologiesFamiliar", b =>
                {
                    b.Property<int>("FresherQualificationId")
                        .HasColumnType("int")
                        .HasColumnName("fresher_qualification_id");

                    b.Property<int>("TechnologiesFamiliarId")
                        .HasColumnType("int")
                        .HasColumnName("technologies_familiar_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("FresherQualificationId", "TechnologiesFamiliarId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "FresherQualificationId" }, "fk_fresher_qualification_has_technologies_familiar_fresher__idx");

                    b.HasIndex(new[] { "TechnologiesFamiliarId" }, "fk_fresher_qualification_has_technologies_familiar_technolo_idx");

                    b.ToTable("fresher_has_technologies_familiar", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.FresherQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<sbyte>("AppearedForZeusTest")
                        .HasColumnType("tinyint")
                        .HasColumnName("appeared_for_zeus_test");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("OtherTechnologiesFamiliar")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("other_technologies_familiar");

                    b.Property<int>("ProfessionalQualificationId")
                        .HasColumnType("int")
                        .HasColumnName("professional_qualification_id");

                    b.Property<string>("RoleAppliedForZeusTest")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("role_applied_for_zeus_test");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProfessionalQualificationId" }, "fk_fresher_qualification_professional_qualification1_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE2");

                    b.ToTable("fresher_qualification", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int?>("Expires")
                        .HasColumnType("int")
                        .HasColumnName("expires");

                    b.Property<int>("JobPreRequisitesId")
                        .HasColumnType("int")
                        .HasColumnName("job_pre_requisites_id");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("job_title");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("location");

                    b.Property<string>("SpecialOpportunity")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("special_opportunity");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "JobPreRequisitesId" }, "fk_job_job_details1_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE3");

                    b.ToTable("job", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.JobHasTimeSlot", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<int>("TimeSlotsId")
                        .HasColumnType("int")
                        .HasColumnName("time_slots_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("JobId", "TimeSlotsId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "JobId" }, "fk_job_details_has_time_slots_job_details1_idx");

                    b.HasIndex(new[] { "TimeSlotsId" }, "fk_job_has_time_slots_job1_idx");

                    b.ToTable("job_has_time_slots", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.JobPreRequisite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("GeneralInstructions")
                        .HasColumnType("text")
                        .HasColumnName("general_instructions");

                    b.Property<string>("InstructionsForExam")
                        .HasColumnType("text")
                        .HasColumnName("Instructions_for_exam");

                    b.Property<string>("MinSystemRequirements")
                        .HasColumnType("text")
                        .HasColumnName("min_system_requirements");

                    b.Property<string>("Process")
                        .HasColumnType("text")
                        .HasColumnName("process");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE4");

                    b.ToTable("job_pre_requisites", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.JobRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("roles");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE5");

                    b.ToTable("job_roles", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("password");

                    b.Property<int>("UserDetailsUserId")
                        .HasColumnType("int")
                        .HasColumnName("user_details_user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "UserDetailsUserId" }, "fk_login_user_details1_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE6");

                    b.ToTable("login", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.ProfessionalQualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<sbyte?>("Experienced")
                        .HasColumnType("tinyint")
                        .HasColumnName("experienced");

                    b.Property<sbyte?>("Fresher")
                        .HasColumnType("tinyint")
                        .HasColumnName("fresher");

                    b.Property<int>("UserDetailsUserId")
                        .HasColumnType("int")
                        .HasColumnName("user_details_user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserDetailsUserId" }, "fk_professional_qualification_user_details1_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE7");

                    b.ToTable("professional_qualification", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("roles");

                    b.Property<int>("RolesDetailId")
                        .HasColumnType("int")
                        .HasColumnName("roles_detail_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RolesDetailId" }, "fk_roles_roles_detail1_idx");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE8");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.RolesAvailable", b =>
                {
                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<int>("JobRolesId")
                        .HasColumnType("int")
                        .HasColumnName("job_roles_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("JobId", "JobRolesId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "JobId" }, "fk_job_has_job_roles_job1_idx");

                    b.HasIndex(new[] { "JobRolesId" }, "fk_job_has_job_roles_job_roles1_idx");

                    b.ToTable("roles_available", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.RolesDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("GrossPackage")
                        .HasColumnType("int")
                        .HasColumnName("gross_package");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("requirements");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_description");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE9");

                    b.ToTable("roles_detail", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.TechnologiesExpertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Technologies")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("technologies");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE10");

                    b.ToTable("technologies_expertise", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.TechnologiesFamiliar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Technologies")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("technologies");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE11");

                    b.ToTable("technologies_familiar", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Slots")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("slots");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE12");

                    b.ToTable("time_slots", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.UserAppliedForJob", b =>
                {
                    b.Property<int>("UserDetailsUserId")
                        .HasColumnType("int")
                        .HasColumnName("user_details_user_id");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Resume")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("resume");

                    b.Property<string>("TimeSlotSelected")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("time_slot_selected");

                    b.Property<int>("VenueDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("venue_details_id");

                    b.HasKey("UserDetailsUserId", "JobId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "VenueDetailsId" }, "fk_user_applied_for_job_venue_details1_idx");

                    b.HasIndex(new[] { "JobId" }, "fk_user_details_has_job_job1_idx");

                    b.HasIndex(new[] { "UserDetailsUserId" }, "fk_user_details_has_job_user_details1_idx");

                    b.ToTable("user_applied_for_job", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.UserAppliedForJobHasRolesPreference", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("JobId")
                        .HasColumnType("int")
                        .HasColumnName("job_id");

                    b.Property<int>("RolesId")
                        .HasColumnType("int")
                        .HasColumnName("roles_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "JobId", "RolesId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "RolesId" }, "fk_user_applied_for_job_has_roles_roles1_idx");

                    b.HasIndex(new[] { "UserId", "JobId" }, "fk_user_applied_for_job_has_roles_user_applied_for_job1_idx");

                    b.ToTable("user_applied_for_job_has_roles_preferences", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.UserDetail", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("country_code");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("first_name");

                    b.Property<sbyte?>("JobRelatedEmail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("job_related_email")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("phone_number");

                    b.Property<string>("PortfolioUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("portfolio_url");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("profile_image");

                    b.Property<string>("Referal")
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("referal");

                    b.Property<string>("Resume")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("resume");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "email_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("email_UNIQUE1");

                    b.HasIndex(new[] { "PhoneNumber" }, "phone_number_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "user_id_UNIQUE")
                        .IsUnique();

                    b.ToTable("user_details", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.UserHasJobRole", b =>
                {
                    b.Property<int>("UserDetailsUserId")
                        .HasColumnType("int")
                        .HasColumnName("user_details_user_id");

                    b.Property<int>("JobRolesId")
                        .HasColumnType("int")
                        .HasColumnName("job_roles_id");

                    b.Property<DateTime?>("DtCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DtModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("dt_modified")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserDetailsUserId", "JobRolesId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "JobRolesId" }, "fk_user_details_has_job_roles_job_roles1_idx");

                    b.HasIndex(new[] { "UserDetailsUserId" }, "fk_user_details_has_job_roles_user_details1_idx");

                    b.ToTable("user_has_job_roles", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.VenueDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ThingsToRemember")
                        .HasColumnType("text")
                        .HasColumnName("things_to_remember");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("venue");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Id" }, "id_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("id_UNIQUE13");

                    b.ToTable("venue_details", (string)null);
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.EducationalQualification", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.UserDetail", "UserDetailsUser")
                        .WithMany("EducationalQualifications")
                        .HasForeignKey("UserDetailsUserId")
                        .IsRequired()
                        .HasConstraintName("fk_educational_qualifications_user_details1");

                    b.Navigation("UserDetailsUser");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.ExperiencedHasTechnologiesExpertise", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.ExperiencedQualification", "ExperiencedQualification")
                        .WithMany("ExperiencedHasTechnologiesExpertises")
                        .HasForeignKey("ExperiencedQualificationId")
                        .IsRequired()
                        .HasConstraintName("fk_experienced_qualification_has_technologies_expertise_exper1");

                    b.HasOne("WalkIn_Portal_Backend.Models.TechnologiesExpertise", "TechnologiesExpertise")
                        .WithMany("ExperiencedHasTechnologiesExpertises")
                        .HasForeignKey("TechnologiesExpertiseId")
                        .IsRequired()
                        .HasConstraintName("fk_experienced_qualification_has_technologies_expertise_techn1");

                    b.Navigation("ExperiencedQualification");

                    b.Navigation("TechnologiesExpertise");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.ExperiencedHasTechnologiesFamiliar", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.ExperiencedQualification", "ExperiencedQualification")
                        .WithMany("ExperiencedHasTechnologiesFamiliars")
                        .HasForeignKey("ExperiencedQualificationId")
                        .IsRequired()
                        .HasConstraintName("fk_experienced_qualification_has_technologies_familiar_experi1");

                    b.HasOne("WalkIn_Portal_Backend.Models.TechnologiesFamiliar", "TechnologiesFamiliar")
                        .WithMany("ExperiencedHasTechnologiesFamiliars")
                        .HasForeignKey("TechnologiesFamiliarId")
                        .IsRequired()
                        .HasConstraintName("fk_experienced_qualification_has_technologies_familiar_techno1");

                    b.Navigation("ExperiencedQualification");

                    b.Navigation("TechnologiesFamiliar");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.ExperiencedQualification", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.ProfessionalQualification", "ProfessionalQualification")
                        .WithMany("ExperiencedQualifications")
                        .HasForeignKey("ProfessionalQualificationId")
                        .IsRequired()
                        .HasConstraintName("fk_experienced_qualification_professional_qualification1");

                    b.Navigation("ProfessionalQualification");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.FresherHasTechnologiesFamiliar", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.FresherQualification", "FresherQualification")
                        .WithMany("FresherHasTechnologiesFamiliars")
                        .HasForeignKey("FresherQualificationId")
                        .IsRequired()
                        .HasConstraintName("fk_fresher_qualification_has_technologies_familiar_fresher_qu1");

                    b.HasOne("WalkIn_Portal_Backend.Models.TechnologiesFamiliar", "TechnologiesFamiliar")
                        .WithMany("FresherHasTechnologiesFamiliars")
                        .HasForeignKey("TechnologiesFamiliarId")
                        .IsRequired()
                        .HasConstraintName("fk_fresher_qualification_has_technologies_familiar_technologi1");

                    b.Navigation("FresherQualification");

                    b.Navigation("TechnologiesFamiliar");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.FresherQualification", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.ProfessionalQualification", "ProfessionalQualification")
                        .WithMany("FresherQualifications")
                        .HasForeignKey("ProfessionalQualificationId")
                        .IsRequired()
                        .HasConstraintName("fk_fresher_qualification_professional_qualification1");

                    b.Navigation("ProfessionalQualification");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.Job", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.JobPreRequisite", "JobPreRequisites")
                        .WithMany("Jobs")
                        .HasForeignKey("JobPreRequisitesId")
                        .IsRequired()
                        .HasConstraintName("fk_job_job_details1");

                    b.Navigation("JobPreRequisites");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.JobHasTimeSlot", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.Job", "Job")
                        .WithMany("JobHasTimeSlots")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("fk_job_has_time_slots_job");

                    b.HasOne("WalkIn_Portal_Backend.Models.TimeSlot", "TimeSlots")
                        .WithMany("JobHasTimeSlots")
                        .HasForeignKey("TimeSlotsId")
                        .IsRequired()
                        .HasConstraintName("fk_job_has_time_slots_job1");

                    b.Navigation("Job");

                    b.Navigation("TimeSlots");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.Login", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.UserDetail", "UserDetailsUser")
                        .WithMany("Logins")
                        .HasForeignKey("UserDetailsUserId")
                        .IsRequired()
                        .HasConstraintName("fk_login_user_details1");

                    b.Navigation("UserDetailsUser");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.ProfessionalQualification", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.UserDetail", "UserDetailsUser")
                        .WithMany("ProfessionalQualifications")
                        .HasForeignKey("UserDetailsUserId")
                        .IsRequired()
                        .HasConstraintName("fk_professional_qualification_user_details1");

                    b.Navigation("UserDetailsUser");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.Role", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.RolesDetail", "RolesDetail")
                        .WithMany("Roles")
                        .HasForeignKey("RolesDetailId")
                        .IsRequired()
                        .HasConstraintName("fk_roles_roles_detail1");

                    b.Navigation("RolesDetail");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.RolesAvailable", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.Job", "Job")
                        .WithMany("RolesAvailables")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("fk_job_has_job_roles_job1");

                    b.HasOne("WalkIn_Portal_Backend.Models.Role", "JobRoles")
                        .WithMany("RolesAvailables")
                        .HasForeignKey("JobRolesId")
                        .IsRequired()
                        .HasConstraintName("fk_job_has_job_roles_job_roles1");

                    b.Navigation("Job");

                    b.Navigation("JobRoles");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.UserAppliedForJob", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.Job", "Job")
                        .WithMany("UserAppliedForJobs")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("fk_user_details_has_job_job1");

                    b.HasOne("WalkIn_Portal_Backend.Models.UserDetail", "UserDetailsUser")
                        .WithMany("UserAppliedForJobs")
                        .HasForeignKey("UserDetailsUserId")
                        .IsRequired()
                        .HasConstraintName("fk_user_details_has_job_user_details1");

                    b.HasOne("WalkIn_Portal_Backend.Models.VenueDetail", "VenueDetails")
                        .WithMany("UserAppliedForJobs")
                        .HasForeignKey("VenueDetailsId")
                        .IsRequired()
                        .HasConstraintName("fk_user_applied_for_job_venue_details1");

                    b.Navigation("Job");

                    b.Navigation("UserDetailsUser");

                    b.Navigation("VenueDetails");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.UserAppliedForJobHasRolesPreference", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.Role", "Roles")
                        .WithMany("UserAppliedForJobHasRolesPreferences")
                        .HasForeignKey("RolesId")
                        .IsRequired()
                        .HasConstraintName("fk_user_applied_for_job_has_roles_roles1");

                    b.HasOne("WalkIn_Portal_Backend.Models.UserAppliedForJob", "UserAppliedForJob")
                        .WithMany("UserAppliedForJobHasRolesPreferences")
                        .HasForeignKey("UserId", "JobId")
                        .IsRequired()
                        .HasConstraintName("fk_user_applied_for_job_has_roles_user_applied_for_job1");

                    b.Navigation("Roles");

                    b.Navigation("UserAppliedForJob");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.UserHasJobRole", b =>
                {
                    b.HasOne("WalkIn_Portal_Backend.Models.JobRole", "JobRoles")
                        .WithMany("UserHasJobRoles")
                        .HasForeignKey("JobRolesId")
                        .IsRequired()
                        .HasConstraintName("fk_user_details_has_job_roles_job_roles1");

                    b.HasOne("WalkIn_Portal_Backend.Models.UserDetail", "UserDetailsUser")
                        .WithMany("UserHasJobRoles")
                        .HasForeignKey("UserDetailsUserId")
                        .IsRequired()
                        .HasConstraintName("fk_user_details_has_job_roles_user_details1");

                    b.Navigation("JobRoles");

                    b.Navigation("UserDetailsUser");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.ExperiencedQualification", b =>
                {
                    b.Navigation("ExperiencedHasTechnologiesExpertises");

                    b.Navigation("ExperiencedHasTechnologiesFamiliars");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.FresherQualification", b =>
                {
                    b.Navigation("FresherHasTechnologiesFamiliars");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.Job", b =>
                {
                    b.Navigation("JobHasTimeSlots");

                    b.Navigation("RolesAvailables");

                    b.Navigation("UserAppliedForJobs");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.JobPreRequisite", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.JobRole", b =>
                {
                    b.Navigation("UserHasJobRoles");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.ProfessionalQualification", b =>
                {
                    b.Navigation("ExperiencedQualifications");

                    b.Navigation("FresherQualifications");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.Role", b =>
                {
                    b.Navigation("RolesAvailables");

                    b.Navigation("UserAppliedForJobHasRolesPreferences");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.RolesDetail", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.TechnologiesExpertise", b =>
                {
                    b.Navigation("ExperiencedHasTechnologiesExpertises");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.TechnologiesFamiliar", b =>
                {
                    b.Navigation("ExperiencedHasTechnologiesFamiliars");

                    b.Navigation("FresherHasTechnologiesFamiliars");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.TimeSlot", b =>
                {
                    b.Navigation("JobHasTimeSlots");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.UserAppliedForJob", b =>
                {
                    b.Navigation("UserAppliedForJobHasRolesPreferences");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.UserDetail", b =>
                {
                    b.Navigation("EducationalQualifications");

                    b.Navigation("Logins");

                    b.Navigation("ProfessionalQualifications");

                    b.Navigation("UserAppliedForJobs");

                    b.Navigation("UserHasJobRoles");
                });

            modelBuilder.Entity("WalkIn_Portal_Backend.Models.VenueDetail", b =>
                {
                    b.Navigation("UserAppliedForJobs");
                });
#pragma warning restore 612, 618
        }
    }
}
